import jsPDF from 'jspdf';

interface ExportData {
  paper: {
    id: string;
    title: string;
    authors: string[];
    journal: string;
    year: string;
    abstract: string;
  };
  analysis: {
    summary: string;
    key_findings: string[];
    methodology: string;
    conclusions: string;
    research_gaps: string[];
    future_directions: string[];
    confidence_score: number;
  };
  mindMapData?: any;
}

export const exportAnalysisToPDF = (data: ExportData): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const lineHeight = 7;
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont(undefined, 'bold');
    } else {
      doc.setFont(undefined, 'normal');
    }

    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    
    // Check if we need a new page
    if (yPosition + (lines.length * lineHeight) > pageHeight - margin) {
      doc.addPage();
      yPosition = margin;
    }

    doc.text(lines, margin, yPosition);
    yPosition += lines.length * lineHeight + 5;
  };

  // Header
  doc.setFillColor(59, 130, 246); // Blue background
  doc.rect(0, 0, pageWidth, 30, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont(undefined, 'bold');
  doc.text('GeneLinker AI - Research Analysis Report', margin, 20);
  
  // Reset text color
  doc.setTextColor(0, 0, 0);
  yPosition = 40;

  // Paper Information
  addWrappedText('PAPER INFORMATION', 16, true);
  addWrappedText(`Title: ${data.paper.title}`, 12);
  addWrappedText(`Authors: ${data.paper.authors.join(', ')}`, 12);
  addWrappedText(`Journal: ${data.paper.journal} (${data.paper.year})`, 12);
  addWrappedText(`Paper ID: ${data.paper.id}`, 12);
  
  yPosition += 10;

  // Abstract
  addWrappedText('ABSTRACT', 16, true);
  addWrappedText(data.paper.abstract, 11);
  
  yPosition += 10;

  // AI Analysis
  addWrappedText('AI ANALYSIS SUMMARY', 16, true);
  addWrappedText(data.analysis.summary, 12);
  
  yPosition += 10;

  // Key Findings
  addWrappedText('KEY FINDINGS', 14, true);
  data.analysis.key_findings.forEach((finding, index) => {
    addWrappedText(`${index + 1}. ${finding}`, 11);
  });
  
  yPosition += 10;

  // Methodology
  addWrappedText('METHODOLOGY', 14, true);
  addWrappedText(data.analysis.methodology, 11);
  
  yPosition += 10;

  // Conclusions
  addWrappedText('CONCLUSIONS', 14, true);
  addWrappedText(data.analysis.conclusions, 11);
  
  yPosition += 10;

  // Research Gaps
  addWrappedText('IDENTIFIED RESEARCH GAPS', 14, true);
  data.analysis.research_gaps.forEach((gap, index) => {
    addWrappedText(`${index + 1}. ${gap}`, 11);
  });
  
  yPosition += 10;

  // Future Directions
  addWrappedText('FUTURE RESEARCH DIRECTIONS', 14, true);
  data.analysis.future_directions.forEach((direction, index) => {
    addWrappedText(`${index + 1}. ${direction}`, 11);
  });
  
  yPosition += 10;

  // Confidence Score
  addWrappedText('ANALYSIS CONFIDENCE', 14, true);
  addWrappedText(`Confidence Score: ${(data.analysis.confidence_score * 100).toFixed(1)}%`, 12);
  
  // Footer
  const footerY = pageHeight - 15;
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  doc.text(`Generated by GeneLinker AI on ${new Date().toLocaleDateString()}`, margin, footerY);
  doc.text(`Page 1 of ${doc.getNumberOfPages()}`, pageWidth - margin - 30, footerY);

  // Save the PDF
  const fileName = `genelinker_analysis_${data.paper.id}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};